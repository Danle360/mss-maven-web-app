# Installing the Ingress Controller In AWS and GKE
#1. Clone Kubernetes Nginx Ingress Manifests into server where you have kubectl
git clone https://github.com/MithunTechnologiesDevOps/kubernetes-ingress.git
cd kubernetes-ingress/deployments

##2. Create a Namespace And SA
kubectl apply -f common/ns-and-sa.yaml

##3. Create RBAC, Default Secret And Config Map
kubectl apply -f common/

## 4. Deploy the Ingress Controller
#We include two options for deploying the Ingress controller:
#Deployment*. Use a Deployment if you plan to dynamically change the number of Ingress controller replicas.
#DaemonSet*. Use a DaemonSet for deploying the Ingress controller on every node or a subset of nodes.

#4.1 Create a DaemonSet
#When you run the Ingress Controller by using a DaemonSet, Kubernetes will create an Ingress controller pod on every node of the cluster.
kubectl apply -f daemon-set/nginx-ingress.yaml

##5. Check that the Ingress Controller is Running
#Check that the Ingress Controller is Running
#Run the following command to make sure that the Ingress controller pods are running:
kubectl get pods --namespace=nginx-ingress

## 6. Get Access to the Ingress Controller
#If you created a daemonset**, ports 80 and 443 of the Ingress controller container are mapped to the same ports of the node where the container is running. To access the Ingress controller, use those ports and an IP address of any node of the cluster where the Ingress controller is running.


### 6.1 Service with the Type LoadBalancer
#Create a service with the type **LoadBalancer**. Kubernetes will allocate and configure a cloud load balancer for load balancing the Ingress controller pods.
#For AWS AND GKE run:
kubectl apply -f service/loadbalancer-aws-elb.yaml

#To get the DNS name of the ELB, run:
kubectl get svc -n nginx-ingress
kubectl describe svc nginx-ingress --namespace=nginx-ingress

#You can resolve the DNS name into an IP address using `nslookup`:




############## connecting multiple services using ingress resources. hostbased setup this is mainly for monitoring services
ns-cloud-e1.googledomains.com
ns-cloud-e2.googledomains.com
ns-cloud-e3.googledomains.com
ns-cloud-e4.googledomains.com

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: promethues-alart-grafana
  namespace: monitoring
spec:
  ingressClassName: nginx
  rules:
  - host: prom.eagunu4live.cloud
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: prometheus-server
            port:
              number: 80
  - host:  met.eagunu4live.cloud
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: prometheus-alertmanager
            port:
              number: 80
  - host: gra.eagunu4live.cloud
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: grafana
            port:
              number: 80

############## connecting multiple services using ingress resources. pathbased setup
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path-based-routing
  namespace: demo 
spec:
  ingressClassName: nginx
  rules:
  - host: mongodb.eagunu4live.cloud
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: mss-springboot-svc   # mss-maven-svc
            port:
             number: 80
      - pathType: Prefix
        path: "/maven-web-app"
        backend:
          service:
            name: mss-maven-svc
            port:
              number: 80
      - pathType: Prefix
        path: "/java-web-app"
        backend:
          service:
            name: mss-java-svc
            port:
              number: 80